name: Android CI with Test Reporting

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  build:

    runs-on: ubuntu-latest

    env:
      JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      # Step 3: Cache Gradle dependencies
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper/
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 4: Download dependencies
      - name: Download Dependencies
        run: ./gradlew dependencies

      # Step 5: Build the project
      - name: Build with Gradle
        run: ./gradlew assembleDebug

      # Step 6: Run Unit Tests
      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest

      # Step 7: Run Instrumented Tests
      - name: Set up Android Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 33
          target: google_apis
          arch: x86_64
          profile: Nexus 5X
          force-avd-creation: true
          emulator-options: -no-window -gpu swiftshader_indirect
          disable-animations: true

      - name: Set up Firebase Credentials
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        run: |
          echo "$FIREBASE_SERVICE_ACCOUNT" > $HOME/firebase_credentials.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$HOME/firebase_credentials.json" >> $GITHUB_ENV

      - name: Run Instrumented Tests
        run: ./gradlew connectedDebugAndroidTest

      # Step 8: Upload Test Artifacts
      - name: Upload Unit Test Results
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results
          path: app/build/test-results/testDebugUnitTest/

      - name: Upload Instrumented Test Results
        uses: actions/upload-artifact@v3
        with:
          name: instrumented-test-results
          path: app/build/reports/androidTests/connected/

      - name: Upload Unit Test HTML Report
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-html-report
          path: app/build/reports/tests/testDebugUnitTest/index.html

      - name: Upload Instrumented Test HTML Report
        uses: actions/upload-artifact@v3
        with:
          name: instrumented-test-html-report
          path: app/build/reports/androidTests/connected/index.html

      # Step 9: Publish Test Results to GitHub Checks
      - name: Publish Unit Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Unit Tests
          path: app/build/test-results/testDebugUnitTest/
          reporter: junit

      - name: Publish Instrumented Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Instrumented Tests
          path: app/build/test-results/androidTest/connected/
          reporter: junit
